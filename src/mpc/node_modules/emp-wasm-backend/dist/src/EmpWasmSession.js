import { Keccak } from "sha3";
import { BufferQueue, secure2PC } from "emp-wasm";
import defer from "./defer";
import { pack } from "msgpackr";
import buffersEqual from "./buffersEqual";
import { Buffer } from 'buffer';
import EmpCircuit from "./EmpCircuit";
export default class EmpWasmSession {
    circuit;
    mpcSettings;
    input;
    send;
    isAlice;
    peerName;
    bq = new BufferQueue();
    result = defer();
    constructor(circuit, mpcSettings, input, send, isAlice) {
        this.circuit = circuit;
        this.mpcSettings = mpcSettings;
        this.input = input;
        this.send = send;
        this.isAlice = isAlice;
        this.peerName = mpcSettings[isAlice ? 1 : 0].name ?? (isAlice ? "1" : "0");
        this.run().catch(err => {
            this.result.reject(err);
        });
    }
    handleMessage(from, msg) {
        if (from !== this.peerName) {
            console.error("Received message from unknown peer", from);
            return;
        }
        this.bq.push(msg);
    }
    async run() {
        const setupHash = new Keccak(256).update(Buffer.from(pack([this.circuit, this.mpcSettings]))).digest();
        this.send(this.peerName, setupHash);
        const msg = await this.bq.pop(32);
        if (!buffersEqual(msg, setupHash)) {
            throw new Error("Setup hash mismatch: check peer settings match");
        }
        const empCircuit = new EmpCircuit(this.circuit, this.mpcSettings);
        const outputBits = await secure2PC(this.isAlice ? 'alice' : 'bob', empCircuit.getSimplifiedBristol(), empCircuit.encodeInput(this.isAlice ? 'alice' : 'bob', this.input), {
            send: data => this.send(this.peerName, data),
            recv: len => this.bq.pop(len),
        });
        this.result.resolve(empCircuit.decodeOutput(outputBits));
    }
    output() {
        return this.result.promise;
    }
}
//# sourceMappingURL=EmpWasmSession.js.map