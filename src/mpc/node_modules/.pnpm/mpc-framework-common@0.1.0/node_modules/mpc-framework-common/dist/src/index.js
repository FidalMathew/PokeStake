export function checkSettingsValid(circuit, mpcSettings, name, input) {
    const circuitInputs = new Set(Object.keys(circuit.info.input_name_to_wire_index));
    const circuitOutputs = new Set(Object.keys(circuit.info.output_name_to_wire_index));
    // Check inputs are non-overlapping and match the circuit
    const participantInputs = new Set();
    for (const participant of mpcSettings) {
        for (const input of participant.inputs) {
            if (participantInputs.has(input)) {
                return new Error(`Duplicate input: ${input}`);
            }
            participantInputs.add(input);
        }
    }
    if (!areSetsEqual(participantInputs, circuitInputs)) {
        return new Error('Participant inputs do not match the circuit');
    }
    // Check output names are in the circuit
    for (const participant of mpcSettings) {
        for (const output of participant.outputs) {
            if (!circuitOutputs.has(output)) {
                return new Error(`Output ${output} is not in the circuit`);
            }
        }
    }
    // Check supplied inputs match our inputs
    const inputKeys = new Set(Object.keys(input));
    const currentParticipant = mpcSettings.find((participant, i) => (participant.name ?? i.toString()) === name);
    if (!currentParticipant) {
        return new Error(`Could not find participant with name ${name}`);
    }
    const requiredInputs = new Set(currentParticipant.inputs);
    if (!areSetsEqual(inputKeys, requiredInputs)) {
        return new Error('Input keys do not match participant inputs');
    }
    return undefined;
}
function areSetsEqual(a, b) {
    if (a.size !== b.size) {
        return false;
    }
    for (const item of a) {
        if (!b.has(item)) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=index.js.map