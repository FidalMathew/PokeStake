import { pack, unpack } from "msgpackr";
import defer from "../helpers/defer";
import { z } from "zod";
export default class PlaintextBackendClientSession {
    circuit;
    mpcSettings;
    name;
    input;
    send;
    hostName;
    outputReceived = defer();
    inputsSent = false;
    constructor(circuit, mpcSettings, name, input, send, hostName) {
        this.circuit = circuit;
        this.mpcSettings = mpcSettings;
        this.name = name;
        this.input = input;
        this.send = send;
        this.hostName = hostName;
    }
    handleMessage(from, msg) {
        if (from !== this.hostName) {
            return;
        }
        const message = unpack(msg);
        if (message === 'ping') {
            if (!this.inputsSent) {
                this.send(this.hostName, pack(this.input));
                this.inputsSent = true;
            }
            return;
        }
        const parseResult = z.record(z.unknown()).safeParse(message);
        if (parseResult.success === false) {
            this.outputReceived.reject(parseResult.error);
            return;
        }
        this.outputReceived.resolve(parseResult.data);
    }
    output() {
        return this.outputReceived.promise;
    }
}
//# sourceMappingURL=PlaintextBackendClientSession.js.map